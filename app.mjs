import {Bot} from "grammy";
import {PrismaClient} from '@prisma/client';
import dotenv from 'dotenv';

dotenv.config();
const prisma = new PrismaClient();
const bot = new Bot(process.env.TOKEN);


let usersBuffer = [];
let blockedUsersBuffer = [];

const REGION = "ru"
const BATCH_SIZE = 5;


async function saveUsersToDatabase() {
    if (usersBuffer.length >= BATCH_SIZE) {
        try {
            await prisma.user.createMany({
                data: usersBuffer
            });
            console.log(`${usersBuffer.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`);
            usersBuffer = [];  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, error);
        }
    }
}

async function blockUsersInDatabase() {
    if (blockedUsersBuffer.length >= BATCH_SIZE) {
        try {
            await prisma.blocked.createMany({
                data: blockedUsersBuffer
            });
            console.log(`${blockedUsersBuffer.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.`);
            blockedUsersBuffer = [];  // –û—á–∏—Å—Ç–∫–∞ –º–∞—Å—Å–∏–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤—Å—Ç–∞–≤–∫–∏
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${error.message}`, error);
        }
    }
}

function parseMessageTime(ctx) {

    const timestamp = ctx.message.date;
    const date = new Date(timestamp * 1000);

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Å—Ç—Ä–æ–∫—É –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    const formattedDate = date.toLocaleString('ru-RU', {
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
        hour: 'numeric',
        minute: 'numeric',
        second: 'numeric',
    });

    return formattedDate;
}

bot.on("message", async (ctx) => {
    console.log(ctx.from.username);
    if(ctx.message.text==="/start"){
        const LOCATION = ctx.from.language_code || "unknown";
        console.log(LOCATION);
        const user = {
            telegramId: String(ctx.from.id),
            language: LOCATION,
            nickname: ctx.from.username || "",
            time: parseMessageTime(ctx),
        };
        if (LOCATION === REGION) {
            usersBuffer.push(user);
            // console.log(usersBuffer.length, "user");
            await saveUsersToDatabase();
            await ctx.reply("–¢–ï–ö–°–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø üòÅ")

        } else {
            blockedUsersBuffer.push(user);
            // console.log(blockedUsersBuffer.length, "block");
            await blockUsersInDatabase();
        }
    }

});

bot.start().catch((err) => {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–æ—Ç–∞: ${err.message}`, err);
});


process.on('SIGINT', async () => {
    console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
    try {
        await saveUsersToDatabase();
        await blockUsersInDatabase();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: ${error.message}`, error);
    } finally {
        await prisma.$disconnect();
        process.exit(0);
    }
});

process.on('SIGTERM', async () => {
    console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
    try {
        await saveUsersToDatabase();
        await blockUsersInDatabase();
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã: ${error.message}`, error);
    } finally {
        await prisma.$disconnect();
        process.exit(0);
    }
});

